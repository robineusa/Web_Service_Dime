// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.51
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

namespace Telmexla.Servicios.DIME.Helpers.ReverseEngineer
{

    using System.Linq;

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class FakeDimeContext : IDimeContext
    {
        public System.Data.Entity.DbSet<Acceso> Accesoes { get; set; }
        public System.Data.Entity.DbSet<CierreCiclo> CierreCicloes { get; set; }
        public System.Data.Entity.DbSet<ClaroVideo> ClaroVideos { get; set; }
        public System.Data.Entity.DbSet<ClientesTodo> ClientesTodoes { get; set; }
        public System.Data.Entity.DbSet<ConvenioElectronico> ConvenioElectronicoes { get; set; }
        public System.Data.Entity.DbSet<DatosAdicionalesCliente> DatosAdicionalesClientes { get; set; }
        public System.Data.Entity.DbSet<DocsisOverlap> DocsisOverlaps { get; set; }
        public System.Data.Entity.DbSet<GestionOutbound> GestionOutbounds { get; set; }
        public System.Data.Entity.DbSet<Ingreso> Ingresoes { get; set; }
        public System.Data.Entity.DbSet<Linea> Lineas { get; set; }
        public System.Data.Entity.DbSet<ModosLogin> ModosLogins { get; set; }
        public System.Data.Entity.DbSet<PreguntasDesbloqueo> PreguntasDesbloqueos { get; set; }
        public System.Data.Entity.DbSet<RegistroSesion> RegistroSesions { get; set; }
        public System.Data.Entity.DbSet<Sysdiagram> Sysdiagrams { get; set; }
        public System.Data.Entity.DbSet<TmpMaestroHobbiesCliente> TmpMaestroHobbiesClientes { get; set; }
        public System.Data.Entity.DbSet<Usuario> Usuarios { get; set; }
        public System.Data.Entity.DbSet<UsuariosXAcceso> UsuariosXAccesoes { get; set; }
        public System.Data.Entity.DbSet<UsuariosXPreguntasDesb> UsuariosXPreguntasDesbs { get; set; }

        public FakeDimeContext()
        {
            Accesoes = new FakeDbSet<Acceso>("Id");
            CierreCicloes = new FakeDbSet<CierreCiclo>("Id");
            ClaroVideos = new FakeDbSet<ClaroVideo>("Id");
            ClientesTodoes = new FakeDbSet<ClientesTodo>("Cuenta");
            ConvenioElectronicoes = new FakeDbSet<ConvenioElectronico>("Id");
            DatosAdicionalesClientes = new FakeDbSet<DatosAdicionalesCliente>("Cuenta");
            DocsisOverlaps = new FakeDbSet<DocsisOverlap>("Id");
            GestionOutbounds = new FakeDbSet<GestionOutbound>("Id");
            Ingresoes = new FakeDbSet<Ingreso>("IdIngreso");
            Lineas = new FakeDbSet<Linea>("Id");
            ModosLogins = new FakeDbSet<ModosLogin>("Id");
            PreguntasDesbloqueos = new FakeDbSet<PreguntasDesbloqueo>("Id");
            RegistroSesions = new FakeDbSet<RegistroSesion>("Id");
            Sysdiagrams = new FakeDbSet<Sysdiagram>("DiagramId");
            TmpMaestroHobbiesClientes = new FakeDbSet<TmpMaestroHobbiesCliente>("IdHobby");
            Usuarios = new FakeDbSet<Usuario>("Id");
            UsuariosXAccesoes = new FakeDbSet<UsuariosXAcceso>("Id", "IdAcceso", "IdUsuario");
            UsuariosXPreguntasDesbs = new FakeDbSet<UsuariosXPreguntasDesb>("Id", "IdPregunta", "IdUsuario");
        }

        public int SaveChangesCount { get; private set; }
        public int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync()
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1);
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }

        protected virtual void Dispose(bool disposing)
        {
        }

        public void Dispose()
        {
            Dispose(true);
        }

        // Stored Procedures
        public int ApartarCuentaGestionOutboundAsesor(int? idAsesor, string gestion)
        {
 
            return 0;
        }

        public int Consultas(decimal? nombreCab, System.Data.DataTable detalles)
        {
 
            return 0;
        }

    }
}
// </auto-generated>
